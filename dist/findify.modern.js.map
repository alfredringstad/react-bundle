{"version":3,"file":"findify.modern.js","sources":["../index.js"],"sourcesContent":["import { useRef, useEffect, useState } from 'react';\nimport { useHistory } from \"react-router-dom\";\n\nconst eventBindings = {\n  autocomplete: 'change:suggestions',\n  recommendation: 'change:items',\n  search: 'change:items',\n}\n\nconst randomKey = () => Math.random().toString(36).substring(7)\n\n\nconst waitForFindify = () => new Promise(resolve =>\n  (window.findifyCallbacks = window.findifyCallbacks || []).push(findify => resolve(findify))\n);\n\nconst getWidgetConfig = (type, node, config, customs) => {\n  const cfg = type === 'recommendation'\n    && config.getIn(['features', 'recommendations', '#' + node.getAttribute('id')])\n    || config.getIn(['features', type]);\n\n  return config.withMutations(c =>\n      c.mergeDeep(cfg)\n      .mergeDeep(customs)\n      .set('node', node)\n      .set('cssSelector', `findify-${type} findify-widget-${customs.widgetKey}`)\n      .toJS()\n    );\n};\n\nexport default ({ type, config = {}, options = {}, widgetKey = randomKey() }) => {\n  const container = useRef(null);\n  const [ready, setReady] = useState(false);\n  const history = useHistory();\n\n  useEffect(() => {\n    if (!container.current) return;\n    let findify = void 0;\n    \n    (async () => {\n      findify = await waitForFindify();\n      findify.history = history;\n    \n      const widgetConfig = getWidgetConfig(\n        type,\n        container.current,\n        findify.config,\n        { ...config, widgetKey, disableAutoRequest: true }\n      );\n    \n      findify.widgets.attach(container.current, type, widgetConfig)\n\n      const widget = findify.widgets.get(widgetKey)\n\n      const meta = widget.config.get('meta') && widget.config.get('meta').toJS() || {};\n      widget.agent.defaults({ ...meta, ...options }).once(eventBindings[type], () => setReady(true))\n\n      if (['search', 'smart-collection'].includes(type)) {\n        widget.agent.applyState(findify.utils.getQuery())\n      }\n      \n    })()\n\n    return () => {\n      if (!findify) return (shouldRender = false)\n      findify.widgets.detach(widgetKey)\n    }\n  }, [container]);\n\n  return [container, ready];\n}\n"],"names":["eventBindings","autocomplete","recommendation","search","randomKey","Math","random","toString","substring","type","config","options","widgetKey","container","useRef","ready","setReady","useState","history","useHistory","useEffect","current","findify","Promise","resolve","window","findifyCallbacks","push","widgetConfig","node","customs","cfg","getIn","getAttribute","withMutations","c","mergeDeep","set","toJS","getWidgetConfig","disableAutoRequest","widgets","attach","widget","get","meta","agent","defaults","once","includes","applyState","utils","getQuery","shouldRender","detach"],"mappings":"yTAGA,MAAMA,EAAgB,CACpBC,aAAc,qBACdC,eAAgB,eAChBC,OAAQ,gBAGJC,EAAY,IAAMC,KAAKC,SAASC,SAAS,IAAIC,UAAU,mBAqB3CC,KAAAA,EAAMC,OAAAA,EAAS,GAAIC,QAAAA,EAAU,GAAIC,UAAAA,EAAYR,QAC7D,MAAMS,EAAYC,EAAO,OAClBC,EAAOC,GAAYC,GAAS,GAC7BC,EAAUC,IAoChB,OAlCAC,EAAU,KACR,IAAKP,EAAUQ,QAAS,OACxB,IAAIC,EA0BJ,MAxBA,WACEA,QA5BuB,IAAIC,QAAQC,IACtCC,OAAOC,iBAAmBD,OAAOC,kBAAoB,IAAIC,KAAKL,GAAWE,EAAQF,KA4B9EA,EAAQJ,QAAUA,EAElB,MAAMU,EA3BY,EAACnB,EAAMoB,EAAMnB,EAAQoB,KAC3C,MAAMC,EAAe,mBAATtB,GACPC,EAAOsB,MAAM,CAAC,WAAY,kBAAmB,IAAMH,EAAKI,aAAa,SACrEvB,EAAOsB,MAAM,CAAC,WAAYvB,IAE/B,OAAOC,EAAOwB,cAAcC,GACxBA,EAAEC,UAAUL,GACXK,UAAUN,GACVO,IAAI,OAAQR,GACZQ,IAAI,cAAgB,WAAU5B,oBAAuBqB,EAAQlB,aAC7D0B,SAiBoBC,CACnB9B,EACAI,EAAUQ,QACVC,EAAQZ,YACHA,GAAQE,UAAAA,EAAW4B,oBAAoB,KAG9ClB,EAAQmB,QAAQC,OAAO7B,EAAUQ,QAASZ,EAAMmB,GAEhD,MAAMe,EAASrB,EAAQmB,QAAQG,IAAIhC,GAE7BiC,EAAOF,EAAOjC,OAAOkC,IAAI,SAAWD,EAAOjC,OAAOkC,IAAI,QAAQN,QAAU,GAC9EK,EAAOG,MAAMC,cAAcF,EAASlC,IAAWqC,KAAKhD,EAAcS,GAAO,IAAMO,GAAS,IAEpF,CAAC,SAAU,oBAAoBiC,SAASxC,IAC1CkC,EAAOG,MAAMI,WAAW5B,EAAQ6B,MAAMC,aAnB1C,GAwBO,KACL,IAAK9B,EAAS,OAAQ+B,cAAe,EACrC/B,EAAQmB,QAAQa,OAAO1C,KAExB,CAACC,IAEG,CAACA,EAAWE"}