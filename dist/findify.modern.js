import{useRef as t,useState as e,useEffect as o}from"react";function n(){return(n=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var o=arguments[e];for(var n in o)Object.prototype.hasOwnProperty.call(o,n)&&(t[n]=o[n])}return t}).apply(this,arguments)}const r={autocomplete:"change:suggestions",recommendation:"change:items",search:"change:items","smart-collection":"change:items"},i=()=>Math.random().toString(36).substring(7),s=()=>new Promise(t=>(window.findifyCallbacks=window.findifyCallbacks||[]).push(e=>t(e)));export default({type:a,config:c={},options:l={},history:g,widgetKey:u=i()})=>{const m=t(null),[d,f]=e(!1),[h,p]=e(!1);return o(()=>{if(!m.current)return;let t;return(async()=>{t=await s(),g&&(t.utils.history=g);const e=((t,e,o,n)=>"recommendation"!==t?n:o.getIn(["features","recommendations","#"+(n.slot||e.getAttribute("id"))]).mergeDeep(n))(a,m.current,t.config,n({widgetKey:u,disableAutoRequest:!0},c));t.widgets.attach(m.current,"smart-collection"===a?"search":a,e);const o=t.widgets.get(u),i=n({},o.config.get("meta")&&o.config.get("meta").toJS()||{},l);"recommendation"===a&&(i.slot=c.slot,i.type=c.type||e.get("type")),"smart-collection"===a&&(i.slot=c.slot||t.utils.collectionPath());const d=t=>window.requestAnimationFrame(()=>{o.agent.off(d),t.size||p(!0),f(!0)});o.agent.defaults(i).on("error",()=>p(!0)).on(r[a],d),["search","smart-collection"].includes(a)&&o.agent.applyState(t.utils.getQuery())})(),()=>{console.log("detach",u),t&&t.widgets.detach(u)}},[m]),[m,d,h]};export{s as waitForFindify};
//# sourceMappingURL=findify.modern.js.map
