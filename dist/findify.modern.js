import{useRef as t,useState as e,useEffect as n}from"react";function o(){return(o=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o])}return t}).apply(this,arguments)}const r={autocomplete:"change:suggestions",recommendation:"change:items",search:"change:items","smart-collection":"change:items"},i=()=>Math.random().toString(36).substring(7),s=()=>new Promise(t=>(window.findifyCallbacks=window.findifyCallbacks||[]).push(e=>t(e)));export default({type:a,config:c={},history:l,options:g={},widgetKey:u=i()})=>{const m=t(null),[d,h]=e(!1),[p,f]=e(!1);return n(()=>{if(!m.current)return;let t;return(async()=>{t=await s(),l&&(t.utils.history=l);const e=((t,e,n,o)=>"recommendation"!==t?o:n.getIn(["features","recommendations","#"+(o.slot||e.getAttribute("id"))]).mergeDeep(o))(a,m.current,t.config,o({widgetKey:u,disableAutoRequest:!0},c));t.widgets.attach(m.current,"smart-collection"===a?"search":a,e);const n=t.widgets.get(u),i=o({},n.config.get("meta")&&n.config.get("meta").toJS()||{},g);"recommendation"===a&&(i.slot=c.slot,i.type=c.type||e.get("type")),"smart-collection"===a&&(i.slot=c.slot||t.utils.collectionPath()),n.agent.defaults(i).once("error",()=>f(!0)).once(r[a],t=>{t.length||f(!0),h(!0)}),["search","smart-collection"].includes(a)&&n.agent.applyState(t.utils.getQuery())})(),()=>{t.widgets.detach(u)}},[m]),[m,d,p]};export{s as waitForFindify};
//# sourceMappingURL=findify.modern.js.map
